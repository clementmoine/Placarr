// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Type {
  games
  movies
  musics
  books
  boardgames
}

enum Condition {
  new
  used
  damaged
}

enum AttachmentType {
  audio
  image
  book
  video
}

enum UserRole {
  admin
  user
  guest
}

model Attachment {
  id          String        @id @default(cuid())
  type        AttachmentType
  title       String?
  duration    Int?
  url         String
  metadata    Metadata      @relation(fields: [metadataId], references: [id], onDelete: Cascade)
  metadataId  String

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Shelf {
  id              String   @id @default(cuid()) 
  name            String
  imageUrl        String?
  color           String?
  type            Type

  items           Item[]  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Author {
  name      String     @id
  imageUrl  String?
  metadata  Metadata[] @relation("MetadataAuthors")
}

model Publisher {
  name      String     @id
  imageUrl  String?
  metadata  Metadata[] @relation("MetadataPublishers")
}

model Metadata {
  id              String      @id @default(cuid())
  title           String?
  authors         Author[]    @relation("MetadataAuthors")
  publishers      Publisher[] @relation("MetadataPublishers")
  duration        Int?
  pageCount       Int?
  tracksCount     Int?
  description     String?
  releaseDate     String?
  imageUrl        String?
  
  attachments     Attachment[]
  
  sourceType      Type
  sourceQuery     String
  lastFetched     DateTime    @default(now())
  
  items           Item[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Item {
  id              String   @id @default(cuid())
  name            String
  description     String?
  imageUrl        String?
  barcode         String?
  condition       Condition

  metadata        Metadata? @relation(fields: [metadataId], references: [id])
  metadataId      String?

  shelf           Shelf    @relation(fields: [shelfId], references: [id], onDelete: Cascade)
  shelfId         String

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model RawName {
  id             Int            @id @default(autoincrement())
  value          String
  barcodeCacheId Int
  barcodeCache   BarcodeCache  @relation(fields: [barcodeCacheId], references: [id])

  @@index([barcodeCacheId])
}

model BarcodeCache {
  id              Int      @id @default(autoincrement())
  barcode         String   @unique
  provider        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  rawNames        RawName[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  role          UserRole  @default(guest)
  password      String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  shelves       Shelf[]
  items         Item[]
}